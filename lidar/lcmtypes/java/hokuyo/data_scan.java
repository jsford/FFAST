/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package hokuyo;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class data_scan implements lcm.lcm.LCMEncodable
{
    public float timestamp;
    public float angle_min;
    public float angle_max;
    public float angle_increment;
    public float time_increment;
    public float scan_time;
    public float range_min;
    public float range_max;
    public int ranges_length;
    public float ranges[];
    public int intensities_length;
    public float intensities[];
 
    public data_scan()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x477ed32a79e3af3fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(hokuyo.data_scan.class))
            return 0L;
 
        classes.add(hokuyo.data_scan.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.timestamp); 
 
        outs.writeFloat(this.angle_min); 
 
        outs.writeFloat(this.angle_max); 
 
        outs.writeFloat(this.angle_increment); 
 
        outs.writeFloat(this.time_increment); 
 
        outs.writeFloat(this.scan_time); 
 
        outs.writeFloat(this.range_min); 
 
        outs.writeFloat(this.range_max); 
 
        outs.writeInt(this.ranges_length); 
 
        for (int a = 0; a < this.ranges_length; a++) {
            outs.writeFloat(this.ranges[a]); 
        }
 
        outs.writeInt(this.intensities_length); 
 
        for (int a = 0; a < this.intensities_length; a++) {
            outs.writeFloat(this.intensities[a]); 
        }
 
    }
 
    public data_scan(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public data_scan(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static hokuyo.data_scan _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        hokuyo.data_scan o = new hokuyo.data_scan();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readFloat();
 
        this.angle_min = ins.readFloat();
 
        this.angle_max = ins.readFloat();
 
        this.angle_increment = ins.readFloat();
 
        this.time_increment = ins.readFloat();
 
        this.scan_time = ins.readFloat();
 
        this.range_min = ins.readFloat();
 
        this.range_max = ins.readFloat();
 
        this.ranges_length = ins.readInt();
 
        this.ranges = new float[(int) ranges_length];
        for (int a = 0; a < this.ranges_length; a++) {
            this.ranges[a] = ins.readFloat();
        }
 
        this.intensities_length = ins.readInt();
 
        this.intensities = new float[(int) intensities_length];
        for (int a = 0; a < this.intensities_length; a++) {
            this.intensities[a] = ins.readFloat();
        }
 
    }
 
    public hokuyo.data_scan copy()
    {
        hokuyo.data_scan outobj = new hokuyo.data_scan();
        outobj.timestamp = this.timestamp;
 
        outobj.angle_min = this.angle_min;
 
        outobj.angle_max = this.angle_max;
 
        outobj.angle_increment = this.angle_increment;
 
        outobj.time_increment = this.time_increment;
 
        outobj.scan_time = this.scan_time;
 
        outobj.range_min = this.range_min;
 
        outobj.range_max = this.range_max;
 
        outobj.ranges_length = this.ranges_length;
 
        outobj.ranges = new float[(int) ranges_length];
        if (this.ranges_length > 0)
            System.arraycopy(this.ranges, 0, outobj.ranges, 0, this.ranges_length); 
        outobj.intensities_length = this.intensities_length;
 
        outobj.intensities = new float[(int) intensities_length];
        if (this.intensities_length > 0)
            System.arraycopy(this.intensities, 0, outobj.intensities, 0, this.intensities_length); 
        return outobj;
    }
 
}

