"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class data_scan(object):
    __slots__ = ["timestamp", "angle_min", "angle_max", "angle_increment", "time_increment", "scan_time", "range_min", "range_max", "ranges_length", "ranges", "intensities_length", "intensities"]

    def __init__(self):
        self.timestamp = 0.0
        self.angle_min = 0.0
        self.angle_max = 0.0
        self.angle_increment = 0.0
        self.time_increment = 0.0
        self.scan_time = 0.0
        self.range_min = 0.0
        self.range_max = 0.0
        self.ranges_length = 0
        self.ranges = []
        self.intensities_length = 0
        self.intensities = []

    def encode(self):
        buf = BytesIO()
        buf.write(data_scan._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffffffffi", self.timestamp, self.angle_min, self.angle_max, self.angle_increment, self.time_increment, self.scan_time, self.range_min, self.range_max, self.ranges_length))
        buf.write(struct.pack('>%df' % self.ranges_length, *self.ranges[:self.ranges_length]))
        buf.write(struct.pack(">i", self.intensities_length))
        buf.write(struct.pack('>%df' % self.intensities_length, *self.intensities[:self.intensities_length]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != data_scan._get_packed_fingerprint():
            raise ValueError("Decode error")
        return data_scan._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = data_scan()
        self.timestamp, self.angle_min, self.angle_max, self.angle_increment, self.time_increment, self.scan_time, self.range_min, self.range_max, self.ranges_length = struct.unpack(">ffffffffi", buf.read(36))
        self.ranges = struct.unpack('>%df' % self.ranges_length, buf.read(self.ranges_length * 4))
        self.intensities_length = struct.unpack(">i", buf.read(4))[0]
        self.intensities = struct.unpack('>%df' % self.intensities_length, buf.read(self.intensities_length * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if data_scan in parents: return 0
        tmphash = (0x477ed32a79e3af3f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if data_scan._packed_fingerprint is None:
            data_scan._packed_fingerprint = struct.pack(">Q", data_scan._get_hash_recursive([]))
        return data_scan._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

