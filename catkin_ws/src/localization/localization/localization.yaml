scan_matcher:
  fixed_frame: map
  use_imu: true
  use_odom: true
  use_vel: false

  publish_tf: false
  publish_pose: false
  do_compute_covariance: 1
  publish_pose_with_covariance_stamped: true

  kf_dist_linear: 0.05  # m
  kf_dist_angular: 0.10 # rad

  max_iterations: 10
  max_angular_correction_deg: 45.0 # deg
  max_linear_correction: 0.40 # m
  outliers_maxPerc: 0.90

amcl:
  # Publish scans from best pose at a max of 10 Hz
  odom_model_type: diff
  odom_alpha5: 0.1
  transform_tolerance: 0.2
  gui_publish_rate: 10.0
  laser_max_beams: 30
  min_particles: 500
  max_particles: 5000
  kld_err: 0.05
  kld_z: 0.99
  odom_alpha1: 0.2
  odom_alpha2: 0.2
  # translation std dev, m
  odom_alpha3: 0.8
  odom_alpha4: 0.2
  laser_z_hit: 0.5
  laser_z_short: 0.05
  laser_z_max: 0.05
  laser_z_rand: 0.5
  laser_sigma_hit: 0.2
  laser_lambda_short: 0.1
  laser_lambda_short: 0.1
  laser_model_type: likelihood_field
  laser_likelihood_max_dist: 2.0
  update_min_d: 0.2
  update_min_a: 0.5
  odom_frame_id: odom
  resample_interval: 1
  transform_tolerance: 0.1
  recovery_alpha_slow: 0.0
  recovery_alpha_fast: 0.0

ekf_localization:
  frequency: 30
  sensor_timeout: 0.1
  two_d_mode: true
  transform_time_offset: 0.0
  transform_timeout: 0.0 # use this if waitfortf need extrapolate?
  print_diagnostics: false # use this when having trouble
  debug: false # only use if you're really desperate
  debug_out_file: /home/nvidia/Documents/robot_localization_debug.txt

  publish_tf: true
  publish_acceleration: false

  map_frame: map
  odom_frame: odom
  base_link_frame: base_link
  world_frame: map

  # config: which value to use in filter
  # order of values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az

  # odom0: /odom # setting this in launch according to fuse_odom arg
  odom0_config: [true,  true,  false,
                false, false, true,
                true, true, true,
                false, false, true,
                true, true, false]
  odom0_queue_size: 10
  odom0_nodelay: false # some advanced nagle's algorithm stuff for when large msg arrive at high freq
  odom0_differential: false # differentiate pose measurements to check for vel reliability(?)
  odom0_relative: false # idk
  # odom0_pose_rejection_threshold: 5 # max diff in sensor measurement to current vehicle state in mahalanobis distance
  # odom0_twist_rejection_threshold: 1 # don't set params if not required

  imu0: /imu
  imu0_config: [false, false, false,
                true,  true,  true,
                false, false, false,
                true,  true,  true,
                true,  true,  true]
  imu0_nodelay: false
  imu0_differential: false
  imu0_relative: true
  imu0_queue_size: 10
  # imu0_pose_rejection_threshold: 0.8                 # Note the difference in parameter names
  # imu0_twist_rejection_threshold: 0.8                #
  # imu0_linear_acceleration_rejection_threshold: 0.8  #
  imu0_remove_gravitational_acceleration: true

  # pose0: /scan_matcher/pose # setting this in launch according to use_scan_matcher or not
  pose0_config: [true,  true,  false,
                false, false, true,
                true, true, false,
                false, false, true,
                true, true, false]
  pose0_differential: true
  pose0_relative: false
  pose0_queue_size: 5
  # pose0_rejection_threshold: 2  # Note the difference in parameter name
  pose0_nodelay: false

  # pose1: /amcl/pose # setting this in launch according to use_amcl or not
  pose1_config: [true,  true,  false,
                false, false, true,
                true, true, false,
                false, false, true,
                true, true, false]
  pose1_differential: true
  pose1_relative: false
  pose1_queue_size: 5
  # pose0_rejection_threshold: 2  # Note the difference in parameter name
  pose1_nodelay: false

  use_control: false # since we have odom and I don't think we can use this cos our control is ackermann
  # stamped_control: false
  # control_timeout: 0.2
  # control_config: [true, false, false, false, false, true]

  # # Should match robot's kinematics.
  # acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]
  # deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]
  # # If robot cannot instantaneously reach acceleration limit, the permitted change can be controlled with these gains
  # acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]
  # deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

  # error added after prediction step. decrease if model match system, increase to trust measurement
  # values order x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az
  process_noise_covariance: [0.05, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0.05, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0.06, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0.03, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0.03, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0.04, 0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.015]

  # initial value for the state estimate error covariance matrix
  # values ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az
  initial_estimate_covariance: [1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    1e-9, 0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    1e-9, 0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    1e-9, 0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    1e-9, 0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    1e-9, 0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    1e-9, 0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    1e-9, 0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    1e-9,  0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     1e-9,  0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1e-9,  0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1e-9, 0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1e-9, 0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    1e-9]

