gradef(abs(xxxx), if xxxx>0 then 1 else -1);

x: [x_, y_, psi, v_x, v_y, psi_dot, pthr, psteer, obs_x, obs_y];
u: [thr, steer];

tire_dyn_f(alpha):=
block([alpha_sl,Fy],
    if abs(alpha)>%pi/2.0
    then alpha: (%pi-abs(alpha))*(alpha/abs(alpha)),

    alpha_sl: atan(3.0*mu*load_f/c_a),

    Fy: 
    if abs(alpha) <= alpha_sl
    then -c_a*tan(alpha) + c_a^2.0/(3.0*mu*load_f)*abs(tan(alpha))*tan(alpha) - c_a^3.0/(27*mu*load_f^2.0)*tan(alpha)^3.0
    else -mu*load_f*(alpha/abs(alpha)),

Fy
);

tire_dyn_r(v_x,thr,alpha):=
block([K,gamma,F,Fx,Fy],
    K:(thr-v_x)/(abs(v_x)+1e-3),

    reverse:1.0,
    
    if K<0.0
    then (reverse:-1.0, K:abs(K)),

    if abs(alpha)>%pi/2.0
    then alpha: (%pi-abs(alpha))*(alpha/abs(alpha)),

    gamma: sqrt(c_x^2.0*(K/(1+K))^2.0+c_a^2.0*(tan(alpha)/(1+K))^2.0),

    F: 
    if gamma <= 3.0*mu*load_r
    then 1.0 - 1.0/(3.0*mu*load_r)*gamma + 1.0/(27.0*mu^2.0*load_r^2.0)*gamma^2.0
    else mu_s*load_r/gamma,

    Fx: c_x * (K/(1.0+K)) * F * reverse,
    Fy: -c_a * (tan(alpha)/(1.0+K)) * F,

[Fx,Fy]
);

dx(x,u) :=
block([x_, y_, psi, v_x, v_y, psi_dot, thr, steer, 
K, Fyf, Fxr, Fyr, 
dpsi_dot, dv_x, dv_y, v, dx, dy],
    [x_, y_, psi, v_x, v_y, psi_dot]: x,
    [thr, steer]: u,

    alpha_f: atan2((v_y+L_f*psi_dot),v_x)-steer,
    alpha_r: atan2((v_y-L_r*psi_dot),v_x),

    Fyf: tire_dyn_f(alpha_f),
    [Fxr,Fyr]: tire_dyn_r(v_x,thr,alpha_r),

    dpsi_dot: (L_f*Fyf*cos(steer)-L_r*Fyr)/I_z,
    dv_x: (Fxr-Fyf*sin(steer))/m+psi_dot*v_y,
    dv_y: (Fyf*cos(steer)+Fyr)/m-psi_dot*v_x,

    v: sqrt(v_x^2.0+v_y^2.0),

    beta: atan2(v_y,v_x),

    dx: v*cos(beta+psi),
    dy: v*sin(beta+psi),

[dx,dy,psi_dot,dv_x,dv_y,dpsi_dot]
);

[d1,d2,d3,d4,d5,d6]: dx([x_,y_,psi,v_x,v_y,psi_dot],[thr,steer]);
f[x_]: x_ + d1*dt;
f[y_]: y_ + d2*dt;
f[psi]: psi + d3*dt;
f[v_x]: v_x + d4*dt;
f[v_y]: v_y + d5*dt;
f[psi_dot]: psi_dot + d6*dt;
f[pthr]: thr;
f[psteer]: steer;
f[obs_x]: obs_x + obs_vel[0]*dt;
f[obs_y]: obs_y + obs_vel[1]*dt;

dthr: (thr-pthr)/dt;
dsteer: (steer-psteer)/dt;

sabs(x, e):= sqrt(x^2 + e^2) - e;

dist_obs: sqrt((x_-obs_x)^2.0 + (y_-obs_y)^2.0 +1e-6);
rel_vel_x: v_x - obs_vel[0];
rel_vel_y: v_y - obs_vel[1];

obs_static: 
if dist_obs > dist_obs_thres
then 0.0
else (1.0/dist_obs - 1.0/dist_obs_thres)^2.0;

obs_dyn_x:
if (x_-obs_x)*rel_vel_x > 0
then 0.0
else rel_vel_x^2.0/dist_obs;

obs_dyn_y:
if (y_-obs_y)*rel_vel_y > 0
then 0.0
else rel_vel_y^2.0/dist_obs;

off_center: if (y_-lane_center)^2 < lane_thres^2
then 0.0
else (y_-lane_center)^2;

F: cf[0]*sabs(x_-goal[0], pf[0])  + cf[1]*sabs(y_-goal[1], pf[1])  + cf[2]*sabs(psi-goal[2], pf[2])
   + cf[3]*sabs(v_x-goal[3], pf[3]) + cf[4]*sabs(v_y-goal[4], pf[4]) + cf[5]*sabs(psi_dot-goal[5], pf[5]);

L: cu[0]*thr^2.0 + cu[1]*steer^2.0
 + cdu[0]*dthr^2.0 + cdu[1]*dsteer^2.0 
 + cx[0]*sabs(x_-goal[0], px[0]) + cx[1]*sabs(y_-goal[1], px[1]) + cx[2]*sabs(psi-goal[2], px[2]) 
 + c_obs[0]*obs_static + c_obs[1]*obs_dyn_x + c_obs[2]*obs_dyn_y
 + c_lane*off_center;

h[1]: -thr + limThr[0]; 
h[2]: thr - limThr[1]; 
h[3]: -steer + limSteer[0]; 
h[4]: steer - limSteer[1]; 
